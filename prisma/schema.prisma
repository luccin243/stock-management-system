// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  DELETED
  PENDING
  DISABLED
}

enum SupplyStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  ADMIN
  SELLER
}

model User {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  avatar     Files?             @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId     String?
  firstName  String
  lastName   String
  email      String             @unique
  password   String
  status     AccountStatus      @default(ACTIVE)
  role       Role               @default(SELLER)
  provides   Provide[]
  recipients ProvideRecipient[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String
  products    Product[]

  @@map("categories")
}

model Product {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String    @unique
  description    String
  purchasedPrice Float     @default(0)
  sellingPrice   Float     @default(0)
  category       Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     String
  supplies       Supply[]
  provides       Provide[]

  @@map("products")
}

model Supply {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  quantity  Int      @default(0)

  @@map("supplies")
}

model Provide {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  quantity   Int                @default(0)
  status     SupplyStatus       @default(PENDING)
  provider   User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  recipients ProvideRecipient[]
}

model ProvideRecipient {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  provide   Provide  @relation(fields: [provideId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  provideId String
  recipient User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model Files {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  width     Int?
  height    Int?
  size      Int
  mime      String
  url       String
  users     User[]

  @@map("files")
}
