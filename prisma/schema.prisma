// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  DELETED
  PENDING
  DISABLED
}

enum SupplyStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  SUPER_ADMIN
  ADMIN
  SELLER
}

enum ProductStatus {
  ACTIVE
  DISABLED
}

model User {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  avatar     Files?        @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId     String?
  firstName  String
  lastName   String
  email      String        @unique
  password   String
  status     AccountStatus @default(ACTIVE)
  role       Role          @default(SELLER)
  MyProduct  MyProduct[]
  providers  Provide[]     @relation("provider")
  recipients Provide[]     @relation("recipient")

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String
  products    Product[]

  @@map("categories")
}

model Product {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String        @unique
  description    String
  status         ProductStatus @default(ACTIVE)
  purchasedPrice Float         @default(0)
  sellingPrice   Float         @default(0)
  category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     String
  stock          Int           @default(0)
  supplies       Supply[]
  provides       Provide[]
  MyProduct      MyProduct[]

  @@map("products")
}

model Supply {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String
  description String?
  quantity    Int      @default(0)

  @@map("supplies")
}

model Provide {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String
  description String?
  quantity    Int          @default(0)
  status      SupplyStatus @default(PENDING)
  provider    User         @relation("provider", fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId  String
  recipient   User         @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId String
}

model MyProduct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  stock     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  @@unique([productId, userId])
  @@map("my-products")
}

model Files {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  width     Int?
  height    Int?
  size      Int
  mime      String
  url       String
  users     User[]

  @@map("files")
}
